{
    "CollectionExt": "The CollectionExt module contains methods that enables users to use collection in a more robust way.",
    "CollectionExt.GroupBy (Collection, String)": {
        "short-description": "Returns a dictionary with grouped values where key is a unique value and item is a collection of items which matches key.",
        "description": "Returns a dictionary with grouped values where key is a unique value and item is a collection of items which matches key.",
        "parameters": {
            "Items": "A set which will be grouped.",
            "PropertyName": "A property of the object which will by used as key."
        },
        "returns": [
            "Scripting.Dictionary",
            "Grouped dictionary base on value."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Items` is `Nothing"
            ],
            [
                "OnArgumentError",
                "`PropertyName` is `vbNullString`"
            ]
        ],
        "example": "The following code example demonstrates how to use GroupBy(Collection, String) to group the project elements of sequence.\n\n```vb\nOption Explicit\n\n' Reservation class\nPublic Id As Long\nPublic BookedOn As Date\n```\n\n```vb\nOption Explicit\n\n'Main module\nPublic Sub Start()\n\n    Dim Reservations As Collection\n    Set Reservations = Lapis.CollectionExt.Make(MakeReservation(1, #1/1/2020#), _\n                                                MakeReservation(2, #1/1/2020#), _\n                                                MakeReservation(3, #1/2/2020#), _\n                                                MakeReservation(4, #1/3/2020#))\n    \n    Dim GroupedByDate As Scripting.Dictionary\n    Set GroupedByDate = Lapis.CollectionExt.GroupBy(Reservations, \"BookedOn\")\n    \n    Dim DateKey As Variant\n    For Each DateKey In GroupedByDate.Keys\n        Debug.Print \"DateKey: \" & DateKey & \", elements: \" & GroupedByDate.Item(DateKey).Count\n    Next DateKey\n\nEnd Sub\n\n\nPrivate Function MakeReservation(ByVal Id As Long, ByVal BookedOn As Date) As Reservation\n    \n    Dim Output As New Reservation\n    Output.Id = Id\n    Output.BookedOn = BookedOn\n    Set MakeReservation = Output\n    \nEnd Function\n\n```"
    },
    "CollectionExt.Concat (Collection, Collection)": {
        "short-description": "Concatenates two sequences.",
        "description": "Concatenates two sequences.",
        "parameters": {
            "First": "The first sequence to concatenate.",
            "Second": "The sequence to concatenate to the first sequence."
        },
        "returns": [
            "Collection",
            "A Collection that contains the concatenated elements of the two input sequences."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`First` or `Second` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use Concat(Collection, Collection) to concatenate two sequences.\n\n```vb\n' Pet class module\nOption Explicit\n\nPublic Name as String\nPublic Age as String\n\n```\n\n```vb\n' Main module\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Cats As Collection\n    Set Cats = Lapis.CollectionExt.Make(MakePet(\"Alfie\", 2), _\n                                        MakePet(\"Ricky\", 5), _\n                                        MakePet(\"Mikey\", 6))\n\n    Dim Dogs As Collection\n    Set Dogs = Lapis.CollectionExt.Make(MakePet(\"Rooney\", 7), _\n                                        MakePet(\"Bull\", 4), _\n                                        MakePet(\"Fredro\", 3))\n\n    Dim Result As Collection\n    Set Result = Lapis.CollectionExt.Concat(Cats, Dogs)\n    \n    Dim Item As Pet\n    For Each Item In Result\n        Debug.Print Item.Name\n    Next Item\n\nEnd Sub\n\n\nPrivate Function MakePet(ByVal Name As String, ByVal Age As Long) As Pet\n\n    Dim Output As New Pet\n    Output.Name = Name\n    Output.Age = Age\n    Set MakePet = Output\n\nEnd Function\n\n' This code produces the following output:\n'\n' Alfie\n' Ricky\n' Mikey\n' Rooney\n' Bull\n' Fredro\n```"
    },
    "CollectionExt.ToArray (Collection)": {
        "short-description": "Creates an array from a collection.",
        "description": "Creates an array from a collection.",
        "parameters": {
            "Items": "A collection to create an array from."
        },
        "returns": [
            "Variant()",
            "An array that contains the elements from the input sequence."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Items` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use ToArray to force immediate query evaluation and return an array of results.\n\n```vb\n' Package class module\nOption Explicit\n\nPublic Company As String\nPublic Weight As Double\n```\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Packages As New Collection\n    With Packages\n        .Add MakePackage(\"Coho Vineyard\", 25.2)\n        .Add MakePackage(\"Lucerne Publishing\", 15)\n        .Add MakePackage(\"Wingtip Toys\", 6)\n        .Add MakePackage(\"Adventure Works\", 33.9)\n    End With\n\n    Dim Converter As Lapis.PropertyToStringConverter\n    Set Converter = Lapis.Factory.PropertyToStringConverter\n    Converter.PropertyName = \"Company\"\n\n    Dim Companies() As Variant\n    Companies = Lapis.CollectionExt.ToArray(Lapis.CollectionExt.Convert(Packages, Converter))\n\n    Dim Item As Variant\n    For Each Item In Companies\n        Debug.Print Item\n    Next Item\n\nEnd Sub\n\n\n' This code produces the following output:\n'\n' Coho Vineyard\n' Lucerne Publishing\n' Wingtip Toys\n' Adventure Works\n\n\nPrivate Function MakePackage(ByVal Company As String, ByVal Weight As Double) As Package\n\n    Dim Output As New Package\n    Output.Company = Company\n    Output.Weight = Weight\n    Set MakePackage = Output\n\nEnd Function\n```"
    },
    "CollectionExt.Distinct (Collection, IEqualityComparer)": {
        "short-description": "Returns distinct elements from a sequence by using a specified IEqualityComparer to compare values.",
        "description": "Returns distinct elements from a sequence by using a specified IEqualityComparer to compare values.",
        "parameters": {
            "Source": "The sequence to remove duplicate elements from.",
            "Comparer": "An IEqualityComparer to compare values."
        },
        "returns": [
            "Collection",
            "A set that contains distinct elements from the source sequence."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` or `Comparer` is `Nothing`"
            ]
        ],
        "example": "The following example shows how to implement an equality comparer that can be used in the Distinct method.\n\n```vb\n' Product class\nOption Explicit\n\nPublic Name As String\nPublic Code As Long\n```\n\n```vb\n' ProductComparer class\nOption Explicit\n\nImplements Lapis.IEqualityComparer\n\n' Determines whether the specified objects are equal.\nPublic Function Equals(ByVal x As Variant, ByVal y As Variant) As Boolean\n\n    If x Is Nothing Or y Is Nothing Then\n        Equals = False\n        Exit Function\n    End If\n    \n    Equals = (x.Name = y.Name) And (x.Code = y.Code)\n    \nEnd Function\n\n\nPrivate Function IEqualityComparer_Equals(ByVal x As Variant, ByVal y As Variant) As Boolean\n    IEqualityComparer_Equals = Me.Equals(x, y)\nEnd Function\n```\n\n```vb\nOption Explicit\n\n\nPublic Sub Start()\n\n    Dim Products As Collection\n    Set Products = Lapis.CollectionExt.Make(MakeProduct(\"Apple\", 9), _\n                                            MakeProduct(\"Orange\", 4), _\n                                            MakeProduct(\"Apple\", 9), _\n                                            MakeProduct(\"Lemon\", 12))\n    ' Exclude duplicates\n\n    Dim NoDuplicates As Collection\n    Set NoDuplicates = Lapis.CollectionExt.Distinct(Products, New ProductComparer)\n    \n    Dim Item As Variant\n    For Each Item In NoDuplicates\n        Debug.Print Item.Name & \" \" & Item.Code\n    Next Item\n\nEnd Sub\n\n' This code produces the following output:\n'\n' Apple 9\n' Orange 4\n' Lemon 12\n\nPrivate Function MakeProduct(ByVal Name As String, ByVal Code As Long) As Product\n    \n    Dim Output As New Product\n    Output.Name = Name\n    Output.Code = Code\n    Set MakeProduct = Output\n    \nEnd Function\n```"
    },
    "CollectionExt.Contains (Collection, Variant, IEqualityComparer)": {
        "short-description": "Determines whether a sequence contains a specified element.",
        "description": "Determines whether a sequence contains a specified element.",
        "parameters": {
            "Source": "A sequence in which to locate a value.",
            "Value": "The value to locate in the sequence.",
            "Comparer": "An equality comparer to compare values."
        },
        "returns": [
            "Boolean",
            "`True` if the source sequence contains an element that has the specified value; otherwise, `False`"
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` is `Nothing`"
            ]
        ],
        "example": "The following example shows how to implement an equality comparer that can be used in the Contains method.\n\n```vb\n' Product class\nOption Explicit\n\nPublic Name As String\nPublic Code As Long\n```\n\n```vb\n' ProductComparer class\nOption Explicit\n\nImplements Lapis.IEqualityComparer\n\n' Determines whether the specified objects are equal.\nPublic Function Equals(ByVal x As Variant, ByVal y As Variant) As Boolean\n\n    If x Is Nothing Or y Is Nothing Then\n        Equals = False\n        Exit Function\n    End If\n    \n    Equals = (x.Name = y.Name) And (x.Code = y.Code)\n    \nEnd Function\n\n\nPrivate Function IEqualityComparer_Equals(ByVal x As Variant, ByVal y As Variant) As Boolean\n    IEqualityComparer_Equals = Me.Equals(x, y)\nEnd Function\n```\n\n```vb\nPublic Sub Start()\n\n    Dim Fruits As Collection\n    Set Fruits = Lapis.CollectionExt.Make(MakeProduct(\"Apple\", 9), _\n                                          MakeProduct(\"Orange\", 4), _\n                                          MakeProduct(\"Lemon\", 12))\n    \n    Dim Apple As Product: Set Apple = MakeProduct(\"Apple\", 9)\n    Dim Kiwi As Product: Set Kiwi = MakeProduct(\"Kiwi\", 8)\n    Dim ProdComp As New ProductComparer\n    \n    Dim HasApple As Boolean: HasApple = Lapis.CollectionExt.Contains(Fruits, Apple, ProdComp)\n    Dim HasKiwi As Boolean: HasKiwi = Lapis.CollectionExt.Contains(Fruits, Kiwi, ProdComp)\n    \n    Debug.Print \"Apple? \" & HasApple\n    Debug.Print \"Kiwi? \" & HasKiwi\n\nEnd Sub\n\n' This code produces the following output:\n'\n' Apple? True\n' Kiwi? False\n\nPrivate Function MakeProduct(ByVal Name As String, ByVal Code As Long) As Product\n    \n    Dim Output As New Product\n    Output.Name = Name\n    Output.Code = Code\n    Set MakeProduct = Output\n    \nEnd Function\n```"
    },
    "CollectionExt.IndexOf (Collection, Variant, IEqualityComparer)": {
        "short-description": "Searches for the specified object and returns the one-based index of the first occurrence within the entire Collection.",
        "description": "Searches for the specified object and returns the one-based index of the first occurrence within the entire Collection",
        "parameters": {
            "Source": "Collection which will be scanned.",
            "Value": "The item to locate in the Collection.",
            "Comparer": "Optional. A comparer to compare items between each other."
        },
        "returns": [
            "Long",
            "The following example shows how IndexOf method can be used for strings.\n\n```vb\nOption Explicit\n' Main module\n\nPublic Sub Start()\n\n    Dim Dinosaurs as Collection\n    Set Dinosaurs = Lapis.CollectionExt.Make(\"Tyrannosaurus\", \"Amargasaurus\", \"Mamenchisaurus\", _\n                                             \"Brachiosaurus\", \"Deinonychus\", \"Tyrannosaurus\", _\n                                             \"Compsognathus\")\n\n    Debug.Print \"IndexOf Tyrannosaurus: \" & Lapis.CollectionExt.IndexOf(Dinosaurs, \"Tyrannosaurus\")\n    Debug.Print \"IndexOf Hydronexus: \" & Lapis.CollectionExt.IndexOf(Dinosaurs, \"Hydronexus\")\n\nEnd Sub\n\n' This code example produces the following output:\n'\n' IndexOf Tyrannosaurus: 1\n' IndexOf Hydronexus: -1\n```"
        ]
    },
    "CollectionExt.AddRange (Collection, Collection)": {
        "short-description": "Adds the elements of the specified collection to the end of the set.",
        "description": "Adds the elements of the specified collection to the end of the set.",
        "parameters": {
            "Container": "The collection to which elements will be added.",
            "Items": "The collection whose elements should be added to the end of the collection. The collection itself cannot be null, but it can contain elements that are `Nothing`"
        },
        "errors": [
            [
                "OnArgumentNull",
                "`Container` is `Nothing"
            ],
            [
                "OnArgumentNull",
                "`Items` is `Nothing`"
            ]
        ],
        "example": "The following example demonstrates the AddRange method that act on ranges.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Dinosaurs As Collection\n    Set Dinosaurs = Lapis.CollectionExt.Make(\"Brachiosaurus\", \"Amargasaurus\", \"Mamenchisaurus\")\n\n    Dim Item As Variant\n    For Each Item In Dinosaurs\n        Debug.Print Item\n    Next Item\n    \n    Dim MoreDinosaurs As Collection\n    Set MoreDinosaurs = Lapis.CollectionExt.Make(\"Tyrannosaurus Rex\", \"Stegosaurus\", \"Triceratops\")\n\n    Lapis.CollectionExt.AddRange Dinosaurs, MoreDinosaurs\n    Debug.Print vbNewLine\n    For Each Item In Dinosaurs\n        Debug.Print Item\n    Next Item\n\nEnd Sub\n\n' This code example produces the following output:\n'\n' Brachiosaurus\n' Amargasaurus\n' Mamenchisaurus\n'\n'\n' Brachiosaurus\n' Amargasaurus\n' Mamenchisaurus\n' Tyrannosaurus Rex\n' Stegosaurus\n' Triceratops\n```"
    },
    "CollectionExt.Sort (Collection, Lapis.IComparer)": {
        "short-description": "Sorts given collection using merge sort according to defined comparer.",
        "description": "Sorts given collection using merge sort according to defined comparer.",
        "parameters": {
            "Items": "Items which will be sorted.",
            "Comparer": "Comparer which defined how items will be sorted."
        },
        "returns": [
            "Collection",
            "Sorted sequence of items."
        ],
        "example": "The following code example demonstrates how to use Sort method to sort the elements of a sequence using custom comparers.\n\n```vb\n' Car class module\nOption Explicit\n\nPublic Manufacturer As String\nPublic Year As Long\n```\n\n```vb\n' CarManufacturerComparer class module\nOption Explicit\n\nImplements IComparer\n\n\nPublic Function Compare(ByRef x As Variant, ByRef y As Variant) As Long\n    \n    If System.IsNothing(x) And System.IsNothing(y) Then\n        Compare = 0\n    \n    Else\n        Compare = StringComparers.OrdinalIgnoreCase.Compare(x.Manufacturer, y.Manufacturer)\n        \n    End If\n    \nEnd Function\n\n\nPrivate Function IComparer_Compare(ByRef x As Variant, ByRef y As Variant) As Long\n    IComparer_Compare = Me.Compare(x, y)\nEnd Function\n```\n\n```vb\n' CarYearComparer class module\nOption Explicit\n\nImplements IComparer\n\n\nPublic Function Compare(ByRef x As Variant, ByRef y As Variant) As Long\n\n    If System.IsNothing(x) And System.IsNothing(y) Then\n        Compare = 0\n       \n    Else\n        Compare = Lapis.Factory.GetLongComparer.Compare(x.Year, y.Year)\n        \n    End If\n\nEnd Function\n\n\nPrivate Function IComparer_Compare(ByRef x As Variant, ByRef y As Variant) As Long\n    IComparer_Compare = Me.Compare(x, y)\nEnd Function\n```\n\n```vb\n' Start module\nOption Explicit\n\n\nPublic Sub Start()\n\n    Dim Cars As Collection\n    Set Cars = CollectionExt.Make(MakeCar(\"Toyota\", 1990), _\n                                  MakeCar(\"Porsche\", 1995), _\n                                  MakeCar(\"Fiat\", 1989))\n    \n    Debug.Print \"Cars sorted by the Year of production\"\n    PrintCars CollectionExt.Sort(Cars, New CarYearComparer)\n    Debug.Print vbNewLine\n    \n    Debug.Print \"Cars sorted by the Manufacturer name\"\n    PrintCars CollectionExt.Sort(Cars, New CarManufacturerComparer)\n    \nEnd Sub\n\n\nPrivate Function MakeCar(ByVal Manufacturer As String, ByVal Year As Long) As Car\n    \n    Dim Output As New Car\n    Output.Manufacturer = Manufacturer\n    Output.Year = Year\n    Set MakeCar = Output\n    \nEnd Function\n\n\nPrivate Sub PrintCars(ByVal Cars As Collection)\n\n    Dim Car As Car\n    For Each Car In Cars\n        Debug.Print \"Car manufacturer: \" & Car.Manufacturer & \", Production year: \" & Car.Year\n    Next Car\n\nEnd Sub\n\n' This code produces the following output:\n\n' Cars sorted by the Year of production\n' Car manufacturer: Fiat, Production year: 1989\n' Car manufacturer: Toyota, Production year: 1990\n' Car manufacturer: Porsche, Production year: 1995\n\n\n' Cars sorted by the Manufacturer name\n' Car manufacturer: Fiat, Production year: 1989\n' Car manufacturer: Porsche, Production year: 1995\n' Car manufacturer: Toyota, Production year: 1990\n```"
    },
    "CollectionExt.Make (ParamArray Variant)": {
        "short-description": "Creates a new collection based on to list of arguments.",
        "description": "Creates a new collection based on to list of arguments.",
        "parameters": {
            "Items": "Array of items which new collection will contain."
        },
        "returns": [
            "Collection",
            "New instance of a collection which contains given items"
        ],
        "example": "The following example takes three strings and puts them into one collection.\n\n```vb\nOption Explicit\nPublic Sub Start()\n\n    Dim Cars As Collection\n    Set Cars = CollectionExt.Make(\"Toyota\", \"Porsche\", \"Fiat\")\n\n    Dim Item As Variant\n    For Each Item In Cars\n        Debug.Print Item\n    Next Item\n\nEnd Sub\n\n' The example displays the following output:\n' Toyota\n' Porsche\n' Fiat \n\n```"
    },
    "CollectionExt.Except (Collection, Collection, IEqualityComparer)": {
        "short-description": "Produces the set difference of two sequences by using the specified IEqualityComparer to compare values.",
        "description": "Produces the set difference of two sequences by using the specified IEqualityComparer to compare values.",
        "parameters": {
            "First": "A collection whose elements that are not also in `Second` will be returned.",
            "Second": "A collection whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.",
            "Comparer": "A comparer to compare items. Parameter can be omitted if item implements `IComparable` interface or item is value type."
        },
        "errors": [
            [
                "OnArgumentNull",
                "`First` is nothing"
            ],
            [
                "OnArgumentNull",
                "`Second` is nothing"
            ]
        ],
        "returns": [
            "Collection",
            "A sequence that contains the set difference of the elements of two sequences."
        ],
        "example": "If you want to compare sequence of objects of some custom data type, you have to implement the IEqualityComparer interface in a helper class. The following code example shows how to implement this interface in a custom data type and provided Equals methods. The following example shows how to implement and equality comparer that can be used in the Except method.\n\n```vb\n' Product class\nOption Explicit\nPublic Name As String\nPublic Code As Long\n```\n\n```vb\n' ProductComparer class\n' A custom comparer for the Product class\nOption Explicit\nImplements Lapis.IEqualityComparer\n\nPublic Function Equals(ByVal x As Product, ByVal y As Product) As Boolean\n\n    If x Is y Then\n        Equals = True\n    \n    ElseIf x Is Nothing Or y Is Nothing Then\n        Equals = False\n    \n    Else\n        Equals = (x.Code = y.Code And x.Name = y.Name)\n    \n    End If\n\nEnd Function\n\nPrivate Function IEqualityComparer_Equals(ByVal x As Variant, ByVal y As Variant) As Boolean\n    IEqualityComparer_Equals = Me.Equals(x, y)\nEnd Function\n```\n\n```vb\n' Main module\nOption Explicit\nPublic Sub Start()\n    \n    Dim Fruits1 As Collection\n    Set Fruits1 = CollectionExt.Make(MakeProduct(\"apple\", 9), _\n                                     MakeProduct(\"orange\", 4), _\n                                     MakeProduct(\"lemon\", 12))\n    \n    Dim Fruits2 As Collection\n    Set Fruits2 = CollectionExt.Make(MakeProduct(\"apple\", 9))\n    \n    ' Get all the elements from the first collection\n    ' except for the elements from the second collection.\n    \n    Dim Except As Collection\n    Set Except = CollectionExt.Except(Fruits1, Fruits2, New ProductComparer)\n    \n    Dim Item As Product\n    For Each Item In Except\n        Debug.Print Item.Name & \" \" & Item.Code\n    Next Item\n    \nEnd Sub\n\nPrivate Function MakeProduct(ByVal Name As String, ByVal Code As Long) As Product\n    \n    Dim Output As New Product\n    Output.Name = Name\n    Output.Code = Code\n    Set MakeProduct = Output\n    \nEnd Function\n\n' This code produces the following output:\n' orange 4\n' lemon 12\n```"
    },
    "CollectionExt.Intersect (Collection, Collection, IEqualityComparer)": {
        "short-description": "Produces the set intersection of two sequences by using the specified IEqualityComparer to compare values.",
        "description": "Produces the set intersection of two sequences by using the specified IEqualityComparer to compare values.",
        "parameters": {
            "First": "A collection whose distinct elements that also appear in `Second` will be returned.",
            "Second": "A collection whose distinct elements that also appear in the `First` sequence will be returned.",
            "Comparer": "A comparer to compare items. Parameter can be omitted if item implements `IComparable` interface or item is value type."
        },
        "returns": [
            "Collection",
            "A sequence that contains the elements that from the intersection of two sequences"
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`First` is `Nothing`."
            ],
            [
                "OnArgumentNull",
                "`Second` is `Nothing`."
            ]
        ],
        "example": "If you want to compare sequence of objects of some custom data type, you have to implement the IEqualityComparer interface in a helper class. The following code example shows how to implement this interface in a custom data type and provided Equals methods. The following example shows how to implement and equality comparer that can be used in the `Intersect` method.\n\n```vb\n' Product class\nOption Explicit\nPublic Name As String\nPublic Code As Long\n```\n\n```vb\n' ProductComparer class\n' A custom comparer for the Product class\nOption Explicit\nImplements Lapis.IEqualityComparer\n\nPublic Function Equals(ByVal x As Product, ByVal y As Product) As Boolean\n\n    If x Is y Then\n        Equals = True\n    \n    ElseIf x Is Nothing Or y Is Nothing Then\n        Equals = False\n    \n    Else\n        Equals = (x.Code = y.Code And x.Name = y.Name)\n    \n    End If\n\nEnd Function\n\nPrivate Function IEqualityComparer_Equals(ByVal x As Variant, ByVal y As Variant) As Boolean\n    IEqualityComparer_Equals = Me.Equals(x, y)\nEnd Function\n```\n\nAfter you implement this comparer, you can use sequences of Product objects in the `Intersect` method, as shown in the following example:\n\n```vb\n' Main module\nOption Explicit\nPublic Sub Start()\n    \n    Dim Fruits1 As Collection\n    Set Fruits1 = CollectionExt.Make(MakeProduct(\"apple\", 9), _\n                                     MakeProduct(\"orange\", 4))\n    \n    Dim Fruits2 As Collection\n    Set Fruits2 = CollectionExt.Make(MakeProduct(\"apple\", 9), _\n                                     MakeProduct(\"lemon\", 12))\n    \n    ' Get the products from the first collection\n    ' that have duplicates in the second array.\n    \n    Dim Duplicates As Collection\n    Set Duplicates = CollectionExt.Intersect(Fruits1, Fruits2, New ProductComparer)\n    \n    Dim Item As Product\n    For Each Item In Duplicates\n        Debug.Print Item.Name & \" \" & Item.Code\n    Next Item\n    \nEnd Sub\n\nPrivate Function MakeProduct(ByVal Name As String, ByVal Code As Long) As Product\n    \n    Dim Output As New Product\n    Output.Name = Name\n    Output.Code = Code\n    Set MakeProduct = Output\n    \nEnd Function\n\n' This code produces the following output:\n' apple 9\n```"
    },
    "CollectionExt.Min (Collection, IComparer)": {
        "short-description": "Invokes a Comparer on each element of a sequence and returns the minimum resulting value.",
        "description": "Invokes a Comparer on each element of a sequence and returns the minimum resulting value.",
        "parameters": {
            "Source": "A sequence of values to determine the minimum value of `Source`.",
            "Comparer": "A Comparer to apply to each element."
        },
        "returns": [
            "Variant",
            "The minimum value in the sequence."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` is `Nothing`."
            ],
            [
                "OnArgumentNull",
                "`Comparer` is `Nothing`."
            ]
        ],
        "example": "The following code example demonstrates how to use `Min` to determine the minimum value in a sequence of projected values.\n\n```vb\n' Pet class module\nOption Explicit\n\nPublic Name As String\nPublic Age As Long\n```\n\n```vb\n' PetByAgeComparer class module\nOption Explicit\n\nImplements Lapis.IComparer\n\nPublic Function Compare(ByVal x As Pet, ByVal y As Pet) As Long\n\n    Compare = IIf(x.Age < y.Age, -1, _\n              IIf(x.Age = y.Age, 0, 1))\n              \nEnd Function\n\n\nPrivate Function IComparer_Compare(ByRef x As Variant, ByRef y As Variant) As Long\n    IComparer_Compare = Me.Compare(x, y)\nEnd Function\n```\n\n```vb\n' Main module\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Pets As Collection\n    Set Pets = CollectionExt.Make(MakePet(\"Barley\", 8), _\n                                  MakePet(\"Boots\", 4), _\n                                  MakePet(\"Whiskers\", 1))\n    \n    Dim Min As Pet\n    Set Min = CollectionExt.Min(Pets, New PetByAgeComparer)\n    \n    Debug.Print \"The youngest animal is age \" & Min.Age\n    \nEnd Sub\n\n\nPrivate Function MakePet(ByVal Name As String, ByVal Age As Long) As Pet\n    \n    Dim Output As New Pet\n    Output.Name = Name\n    Output.Age = Age\n    Set MakePet = Output\n    \nEnd Function\n\n' The example displays the following output:\n' The youngest animal is age 1\n```"
    },
    "CollectionExt.Max (Collection, IComparer)": {
        "short-description": "Invokes a Comparer on each element of a sequence and returns the maximum resulting value.",
        "description": "Invokes a Comparer on each element of a sequence and returns the maximum resulting value.",
        "parameters": {
            "Source": "A sequence of values to determine the maximum value of `Source`.",
            "Comparer": "A Comparer to apply to each element."
        },
        "returns": [
            "Variant",
            "The maximum value in the sequence."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` is `Nothing`."
            ],
            [
                "OnArgumentNull",
                "`Comparer` is `Nothing`."
            ]
        ],
        "example": "The following code example demonstrates how to use `Max` to determine the maximum value in a sequence of projected values.\n\n```vb\n' Pet class module\nOption Explicit\n\nPublic Name As String\nPublic Age As Long\n```\n\n```vb\n' PetByAgeComparer class module\nOption Explicit\n\nImplements Lapis.IComparer\n\nPublic Function Compare(ByVal x As Pet, ByVal y As Pet) As Long\n\n    Compare = IIf(x.Age < y.Age, -1, _\n              IIf(x.Age = y.Age, 0, 1))\n              \nEnd Function\n\n\nPrivate Function IComparer_Compare(ByRef x As Variant, ByRef y As Variant) As Long\n    IComparer_Compare = Me.Compare(x, y)\nEnd Function\n```\n\n```vb\n' Main module\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Pets As Collection\n    Set Pets = CollectionExt.Make(MakePet(\"Barley\", 8), _\n                                  MakePet(\"Boots\", 4), _\n                                  MakePet(\"Whiskers\", 1))\n    \n    Dim Max As Pet\n    Set Max = CollectionExt.Max(Pets, New PetByAgeComparer)\n    \n    Debug.Print \"The oldest animal is age \" & Max.Age\n    \nEnd Sub\n\n\nPrivate Function MakePet(ByVal Name As String, ByVal Age As Long) As Pet\n    \n    Dim Output As New Pet\n    Output.Name = Name\n    Output.Age = Age\n    Set MakePet = Output\n    \nEnd Function\n\n' The example displays the following output:\n' The oldest animal is age 8\n```"
    },
    "CollectionExt.Range (Long, Long)": {
        "short-description": "Generates a sequence of integral numbers within a specified range.",
        "description": "Generates a sequence of integral numbers within a specified range.",
        "parameters": {
            "Start": "The value of the first integer in the sequence.",
            "Count": "The number of sequential integers to generate."
        },
        "returns": [
            "Collection",
            "A collection that contains a range of sequential integral numbers."
        ],
        "errors": [
            [
                "OnArgumentOutOfRange",
                "`Count` is less than 0."
            ],
            [
                "OnArgumentOutOfRange",
                "`Start` + `Count` -1 is larger than LongMaxValue"
            ]
        ],
        "example": "The following code example demonstrates how to use Range to generate a sequence of values.\n\n```vb\n' Main module\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Squares As Collection\n    Set Squares = MakeSquares(CollectionExt.Range(1, 10))\n    \n    Dim Num As Variant\n    For Each Num In Squares\n        Debug.Print Num\n    Next Num\n    \nEnd Sub\n\n\nPrivate Function MakeSquares(ByVal Numbers As Collection) As Collection\n    \n    Dim Output As New Collection\n    Dim Num As Variant\n    For Each Num In Numbers\n        Output.Add Num * Num\n    Next Num\n    Set MakeSquares = Output\n    \nEnd Function\n\n' The example displays the following output:\n' 1\n' 4\n' 9\n' 16\n' 25\n' 36\n' 49\n' 64\n' 81\n' 100\n```"
    },
    "CollectionExt.Repeat (Variant, Long)": {
        "short-description": "Generates a sequence that contains one repeated value.",
        "description": "Generates a sequence that contains one repeated value.",
        "parameters": {
            "Element": "The value to be repeated.",
            "Count": "The number of times to repeat the value in the generated sequence."
        },
        "returns": [
            "Collection",
            "A collection that contains a repeated value."
        ],
        "errors": [
            [
                "OnArgumentOutOfRange",
                "`Count` is less than 0."
            ]
        ],
        "example": "The following code example demonstrates how to use Repeat to generate a sequence of a repeated value.\n\n```vb\n' Main module\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Strings As Collection\n    Set Strings = CollectionExt.Repeat(\"I like programming\", 10)\n    \n    Dim Str As Variant\n    For Each Str In Strings\n        Debug.Print Str\n    Next Str\n    \nEnd Sub\n\n\n' The example displays the following output:\n' I like programming\n' I like programming\n' I like programming\n' I like programming\n' I like programming\n' I like programming\n' I like programming\n' I like programming\n' I like programming\n' I like programming\n```"
    },
    "CollectionExt.Reverse (Collection)": {
        "short-description": "Inverts the order of the elements in a sequence.",
        "description": "Inverts the order of the elements in a sequence.",
        "parameters": {
            "Source": "A sequence of values to reverse."
        },
        "returns": [
            "Collection",
            "A sequence whose elements correspond to those of the input sequence in reverse order."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use Reverse to reverse the order of elements in an array.\n\n```vb\n' Start module\nOption Explicit\n\n\nPublic Sub Start()\n\n    Dim Apple As Collection\n    Set Apple = CollectionExt.Make(\"a\", \"p\", \"p\", \"l\", \"e\")\n    \n    Dim Reversed As Collection\n    Set Reversed = CollectionExt.Reverse(Apple)\n    \n    Debug.Print CollectionExt.ToString(Reversed, Factory.GetValueTypeToStringConverter, \" \")\n    \nEnd Sub\n```"
    },
    "CollectionExt.Sum (Collection, Lapis.IConverter)": {
        "short-description": "Computes the sum of a sequence of Int32 values.",
        "description": "Computes the sum of a sequence of Int32 values.",
        "parameters": {
            "Source": "A sequence of values to calculate the sum of.",
            "Selector": "Method how elements of array will be converted into summable values."
        },
        "returns": [
            "Variant",
            "The sum of the values in the sequence."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` is `Nothing`"
            ],
            [
                "OnArgumentNull",
                "`Selector` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use Sum to sum the values of a sequence.\n\n```vb\n' Start module\nOption Explicit\n\n\nPublic Sub Start()\n\n    Dim Numbers As Collection\n    Set Numbers = CollectionExt.Make(2, 3, 5, 10)\n    \n    Dim Sum As Long\n    Sum = CollectionExt.Sum(Numbers, Factory.GetValueTypeToNumericConverter)\n    \n    Debug.Print \"The sum fo the numbers is \" & Sum\n    \nEnd Sub\n\n' This code produces the following output:\n\n' The sum fo the numbers is 20\n```"
    },
    "CollectionExt.Average (Collection, Lapis.IConverter)": {
        "short-description": "Computes the average of a sequence of values that is obtained by invoking a projection function on each element of the input sequence.",
        "description": "Computes the average of a sequence of values that is obtained by invoking a projection function on each element of the input sequence.",
        "parameters": {
            "Source": "A sequence of values that are used to calculate an average.",
            "Selector": "A projection function to apply to each element."
        },
        "returns": [
            "Variant",
            "The average of the sequence of values."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` is `Nothing`"
            ],
            [
                "OnArgumentNull",
                "`Selector` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use Average to calculate the average String length in a sequence of values of type String.\n\n```vb\n' StringToLengthConverter class module\nOption Explicit\n\nImplements Lapis.IConverter\n\n\nPublic Function Convert(ByVal Item As Variant) As Variant\n    Convert = VBA.Len(Item)\nEnd Function\n\n\nPrivate Function IConverter_Convert(ByVal Item As Variant) As Variant\n    IConverter_Convert = Me.Convert(Item)\nEnd Function\n```\n\n```vb\n' Start module\nOption Explicit\n\n\nPublic Sub Start()\n\n    Dim Fruits As Collection\n    Set Fruits = CollectionExt.Make(\"apple\", \"banana\", \"mango\", \"orange\", \"passionfruit\", \"grape\")\n    \n    Dim Average As Double\n    Average = CollectionExt.Average(Fruits, New StringToLengthConverter)\n    \n    Debug.Print \"The average string length is \" & Average\n    \nEnd Sub\n\n' This code produces the following output:\n\n' The average string length is 6,5\n```"
    },
    "CollectionExt.Take (Collection, Long)": {
        "short-description": "Returns a specified number of contiguous elements from the start of a sequence.",
        "description": "Returns a specified number of contiguous elements from the start of a sequence.",
        "parameters": {
            "Source": "The sequence to return elements from.",
            "Count": "A projection function to apply to each element."
        },
        "returns": [
            "Collection",
            "A Collection that contains the specified number of elements from the start of the input sequence."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use Take to return elements from the start of a sequence.\n\n```vb\n' Start Module\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Grades As Collection\n    Set Grades = CollectionExt.Make(59, 82, 70, 56, 92, 98, 85)\n    \n    Dim BottomThreeGrades As Collection\n    Set BottomThreeGrades = CollectionExt.Take( _\n        CollectionExt.Sort(Grades, Lapis.Factory.GetLongComparer), 3)\n        \n    Debug.Print \"The bottom three grades are:\"\n        \n    Dim Grade As Variant\n    For Each Grade In BottomThreeGrades\n        Debug.Print Grade\n    Next Grade\n\nEnd Sub\n\n\n' This code produces the following output:\n' 56 \n' 59 \n' 70 \n```"
    },
    "CollectionExt.All (Collection, Predicate)": {
        "short-description": "Determines whether all elements of a sequence satisfy a condition.",
        "description": "Determines whether all elements of a sequence satisfy a condition.",
        "parameters": {
            "Source": "A Collection that contains the elements to apply the predicate to.",
            "Predicate": "A function to test each element for a condition."
        },
        "returns": [
            "Boolean",
            "`true` if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, `false`."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` or `Predicate` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use All to determine whether all the elements in a sequence satisfy a condition. Variable AllOlderThan5Years is true if all the pet names start with \"B\" or if the pets array is empty.\n\n```vb\n' Pet Class Module\nOption Explicit\n\nPublic Name As String\nPublic Age As Long\n```\n\n```vb\n' Start Module\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Pets As Collection\n    Set Pets = CollectionExt.Make(MakePet(\"Barley\", 10), _\n                                  MakePet(\"Boots\", 4), _\n                                  MakePet(\"Whiskers\", 6))\n    Dim Pred As Lapis.Predicate\n    Set Pred = Lapis.Factory.GetPredicate\n    Pred.ComparisonValue = 5\n    Pred.Operator = Lapis.ComparisonOperator.GreaterThanOrEqualTo\n\n    Dim AllOlderThan5Years As Boolean\n    AllOlderThan5Years = CollectionExt.All(Pets, Pred)\n    \n    If AllOlderThan5Years Then\n        Debug.Print \"All pets are older than 5 years.\"\n    Else\n        Debug.Print \"Not all pets are older than 5 years.\"\n    End If\n\nEnd Sub\n\n' This code produces the following output:\n'\n' Not all pets are older than 5 years.\n\n\nPrivate Function MakePet(ByVal Name As String, ByVal Age As Long) As Pet\n    \n    Dim Output As New Pet\n    Output.Name = Name\n    Output.Age = Age\n    Set MakePet = Output\n    \nEnd Function\n```"
    },
    "CollectionExt.Some (Collection, Predicate)": {
        "short-description": "Determines whether any element of a sequence satisfies a condition.",
        "description": "Determines whether any element of a sequence satisfies a condition.",
        "parameters": {
            "Source": "A Collection whose elements to apply the predicate to.",
            "Predicate": "A function to test each element for a condition."
        },
        "returns": [
            "Boolean",
            "`true` if any elements in the source sequence pass the test in the specified predicate; otherwise, `false`."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use All to determine whether all the elements in a sequence satisfy a condition. Variable AllOlderThan5Years is true if all the pet names start with \"B\" or if the pets array is empty.\n\n```vb\n' Pet Class Module\nOption Explicit\n\nPublic Name As String\nPublic Age As Long\n```\n\n```vb\n' Start Module\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Pets As Collection\n    Set Pets = CollectionExt.Make(MakePet(\"Barley\", 10), _\n                                  MakePet(\"Boots\", 4), _\n                                  MakePet(\"Whiskers\", 6))\n    Dim Pred As Lapis.Predicate\n    Set Pred = Lapis.Factory.GetPredicate\n    Pred.ComparisonValue = 5\n    Pred.Operator = Lapis.ComparisonOperator.GreaterThanOrEqualTo\n\n    Dim AnyOlderThan5Years As Boolean\n    AnyOlderThan5Years = CollectionExt.Some(Pets, Pred)\n    \n    If AnyOlderThan5Years Then\n        Debug.Print \"Some pets are older than 5 years.\"\n    Else\n        Debug.Print \"Not pet is older than 5 years.\"\n    End If\n\nEnd Sub\n\n' This code produces the following output:\n'\n' Some pets are older than 5 years.\n\n\nPrivate Function MakePet(ByVal Name As String, ByVal Age As Long) As Pet\n    \n    Dim Output As New Pet\n    Output.Name = Name\n    Output.Age = Age\n    Set MakePet = Output\n    \nEnd Function\n```"
    },
    "CollectionExt.Skip (Collection, Long)": {
        "short-description": "Bypasses a specified number of elements in a sequence and then returns the remaining elements.",
        "description": "Bypasses a specified number of elements in a sequence and then returns the remaining elements.",
        "parameters": {
            "Source": "A Collection to return elements from.",
            "Count": "The number of elements to skip before returning the remaining elements."
        },
        "returns": [
            "Collection",
            "A Collection that contains the elements that occur after the specified index in the input sequence."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use Skip to skip a specified number of elements in a sorted array and return the remaining elements.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Grades As Collection\n    Set Grades = Lapis.CollectionExt.Make(59, 82, 70, 85, 56, 92, 98)\n    \n    Dim Ordered As Collection\n    Set Ordered = Lapis.CollectionExt.Sort(Grades, Lapis.Factory.GetLongComparer)\n    \n    Dim LowerGrades As Collection\n    Set LowerGrades = Lapis.CollectionExt.Skip(Ordered, 3)\n    \n    Debug.Print \"All grades except the top three are:\"\n    Dim Grade As Variant\n    For Each Grade In LowerGrades\n        Debug.Print Grade\n    Next Grade\n    \nEnd Sub\n\n' This code produces the following output:\n'\n' All grades except the top three are:\n' 82\n' 70\n' 59\n' 56\n```"
    },
    "CollectionExt.First (Collection, Predicate)": {
        "short-description": "Returns the first element in a sequence that satisfies a specified condition.",
        "description": "Returns the first element in a sequence that satisfies a specified condition.",
        "parameters": {
            "Source": "A collection to return an element from.",
            "Predicate": "A function to test each element for a condition."
        },
        "returns": [
            "Variant",
            "The first element in the sequence that passes the test in the specified predicate function.."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` or `Predicate` is `Nothing`"
            ],
            [
                "OnInvalidOperation",
                "When the number of elements in Source is zero"
            ],
            [
                "OnInvalidOperation",
                "No element satisfies the condition in predicate."
            ]
        ],
        "example": "The following code example demonstrates how to use First(Collection, Predicate) to return the first element of a collection that satisfies a condition.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Numbers As Collection\n    Set Numbers = Lapis.CollectionExt.Make(9, 34, 65, 92, 87, 435, 3, 54, _\n                                           83, 23, 87, 435, 67, 12, 19)\n    \n    Dim Pred As Lapis.Predicate\n    Set Pred = Lapis.Factory.GetPredicate\n    \n    With Pred\n        .Operator = Lapis.ComparisonOperator.GreaterThan\n        .ComparisonValue = 80\n        .Comparer = Lapis.Factory.GetLongComparer\n    End With\n    \n    Dim First As Variant\n    First = Lapis.CollectionExt.First(Numbers, Pred)\n    \n    Debug.Print First\n    \nEnd Sub\n\n' This code produces the following output:\n'\n' 92\n```"
    },
    "CollectionExt.Last (Collection, Predicate)": {
        "short-description": "Returns the last element of a sequence.",
        "description": "Returns the last element of a sequence.",
        "parameters": {
            "Source": "A collection to return an element from.",
            "Predicate": "A function to test each element for a condition."
        },
        "returns": [
            "Variant",
            "The last element in the sequence that passes the test in the specified predicate function."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` or `Predicate` is `Nothing`"
            ],
            [
                "OnInvalidOperation",
                "When the number of elements in Source is zero"
            ],
            [
                "OnInvalidOperation",
                "No element satisfies the condition in predicate."
            ]
        ],
        "example": "The following code example demonstrates how to use Last(Collection, Predicate) to return the last element of a collection that satisfies a condition.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Numbers As Collection\n    Set Numbers = Lapis.CollectionExt.Make(9, 34, 65, 92, 87, 435, 3, 54, _\n                                           83, 23, 87, 67, 12, 19)\n    \n    Dim Pred As Lapis.Predicate\n    Set Pred = Lapis.Factory.GetPredicate\n    \n    With Pred\n        .Operator = Lapis.ComparisonOperator.GreaterThan\n        .ComparisonValue = 80\n        .Comparer = Lapis.Factory.GetLongComparer\n    End With\n    \n    Dim Last As Variant\n    Last = Lapis.CollectionExt.Last(Numbers, Pred)\n    \n    Debug.Print Last\n\nEnd Sub\n\n' This code produces the following output:\n'\n' 87\n```"
    },
    "CollectionExt.SelectOne (Collection, Predicate)": {
        "short-description": "Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.",
        "description": "Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.",
        "parameters": {
            "Source": "A Collection to return a single element from.",
            "Predicate": "A function to test an element for a condition."
        },
        "returns": [
            "Variant",
            "The single element of the input sequence that satisfies a condition."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` or `Predicate` is `Nothing`"
            ],
            [
                "OnInvalidOperation",
                "When the number of elements in `Source is zero"
            ],
            [
                "OnInvalidOperation",
                "No element satisfies the condition in `predicate`."
            ],
            [
                "OnInvalidOperation",
                "More than one element satisfies the condition in `predicate`"
            ]
        ],
        "example": "The following code example demonstrates how to use SelectOne(Collection, Predicate) to select the only element of a set that satisfies a condition.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Fruits As Collection\n    Set Fruits = Lapis.CollectionExt.Make(\"apple\", \"banana\", \"mango\", \"orange\", \"passionfruit\", \"grape\")\n\n    Dim Pred As Lapis.Predicate\n    Set Pred = Lapis.Factory.GetPredicate\n    \n    With Pred\n        .Operator = Lapis.ComparisonOperator.GreaterThanOrEqualTo\n        .ComparisonValue = 10\n        .Comparer = Lapis.Factory.GetWordLengthComparer\n    End With\n    \n    Dim Fruit1 As Variant\n    Fruit1 = Lapis.CollectionExt.SelectOne(Fruits, Pred)\n    \n    Debug.Print Fruit1\n\nEnd Sub\n\n' This code produces the following output:\n'\n' passionfruit\n```"
    },
    "CollectionExt.Count (Collection, Predicate)": {
        "short-description": "Returns a number that represents how many elements in the specified sequence satisfy a condition.",
        "description": "Returns a number that represents how many elements in the specified sequence satisfy a condition.",
        "parameters": {
            "Source": "A sequence that contains elements to be tested and counted.",
            "Predicate": "A function to test each element for a condition."
        },
        "returns": [
            "Long",
            "A number that represents how many elements in the sequence satisfy the condition in the predicate function."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` or `Predicate` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use Count(Collection, Predicate) to count the elements in an array that satisfy a condition.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Numbers As Collection\n    Set Numbers = Lapis.CollectionExt.Make(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n    Dim Pred As Lapis.Predicate\n    Set Pred = Lapis.Factory.GetPredicate\n    \n    With Pred\n        .Operator = Lapis.ComparisonOperator.GreaterThanOrEqualTo\n        .ComparisonValue = 5\n        .Comparer = Lapis.Factory.GetLongComparer\n    End With\n    \n    Dim Value As Variant\n    Value = Lapis.CollectionExt.Count(Numbers, Pred)\n    \n    Debug.Print \"There are \" & Value & \" numbers greater than or equal to 5.\"\n\nEnd Sub\n\n' This code produces the following output:\n'\n' There are 6 numbers greater than or equal to 5.\n```"
    },
    "CollectionExt.Where (Collection, Predicate)": {
        "short-description": "Filters a sequence of values based on a predicate",
        "description": "Filters a sequence of values based on a predicate",
        "parameters": {
            "Source": "A sequence to filter.",
            "Predicate": "A function to test each element for a condition."
        },
        "returns": [
            "Collection",
            "A set that contains elements from the input sequence that satisfy the condition."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` or `Predicate` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use Where(Collection, Predicate) to filter a sequence.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Fruits As Collection\n    Set Fruits = Lapis.CollectionExt.Make(\"apple\", \"passionfruit\", \"banana\", \"mango\", _\n                                         \"orange\", \"blueberry\", \"grape\", \"strawberry\")\n    \n    Dim Pred As Lapis.Predicate\n    Set Pred = Lapis.Factory.GetPredicate\n    With Pred\n        .ComparisonValue = 6\n        .Operator = Lapis.ComparisonOperator.LessThan\n        .Comparer = Lapis.Factory.GetWordLengthComparer\n    End With\n    \n    Dim Query As Collection\n    Set Query = Lapis.CollectionExt.Where(Fruits, Pred)\n    \n    Dim Fruit As Variant\n    For Each Fruit In Query\n        Debug.Print Fruit\n    Next Fruit\n\nEnd Sub\n\n' This code produces the following output:\n' apple\n' mango\n' grape\n```"
    },
    "CollectionExt.Convert (Collection, Lapis.IConverter)": {
        "short-description": "Projects each element of a sequence into a new form.",
        "description": "Projects each element of a sequence into a new form.",
        "parameters": {
            "Source": "A sequence of values to invoke a transform function on.",
            "Converter": "A transform function to apply to each element."
        },
        "returns": [
            "Collection",
            "A set whose elements are the result of invoking the transform function on each element of `Source`"
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`Source` or `Converter` is `Nothing`"
            ]
        ],
        "example": "The following code example demonstrates how to use Convert(Collection, Lapis.IConverter) to force immediate query evaluation and return a set of results.\n\n```vb\n' MathSquareConverter class module\nOption Explicit\n\nImplements Lapis.IConverter\n\n\nPublic Function Convert(ByVal Item As Variant) As Variant\n    Convert = Item * Item\nEnd Function\n\n\nPrivate Function IConverter_Convert(ByVal Item As Variant) As Variant\n    IConverter_Convert = Me.Convert(Item)\nEnd Function\n```\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Numbers As Collection\n    Set Numbers = Lapis.CollectionExt.Range(1, 10)\n    \n    Dim Squares As Collection\n    SetSquares = Lapis.CollectionExt.Convert(Numbers, New MathSquareConverter)\n\n    Dim Item As Variant\n    For Each Item In Squares\n        Debug.Print Item\n    Next Item\n\nEnd Sub\n\n\n' This code produces the following output:\n'\n' 1\n' 4\n' 9\n' 16\n' 25\n' 36\n' 49\n' 64\n' 81\n' 100\n```"
    },
    "CollectionExt.SequenceEqual (Collection, Collection, IEqualityComparer)": {
        "short-description": "Determines whether two sequences are equal by comparing their elements by using a specified IEqualityComparer.",
        "description": "Determines whether two sequences are equal by comparing their elements by using a specified IEqualityComparer.",
        "parameters": {
            "First": "A set to compare to `Second`.",
            "Second": "A set to compare to the first sequence.",
            "Comparer": "An `IEqualityComparer` to use to compare elements."
        },
        "returns": [
            "Boolean",
            "`True` if the two source sequences are of equal length and their corresponding elements compare equal according to comparer; otherwise, `False`."
        ],
        "errors": [
            [
                "OnArgumentNull",
                "`First`, `Second` or `Converter` is `Nothing`"
            ]
        ],
        "example": "The following example shows how to implement an equality comparer that can be used in the SequenceEqual(Collection, Collection, IEqualityComparer) method.\n\n```vb\n' Product class\nOption Explicit\n\nPublic Name As String\nPublic Code As Long\n```\n\n```vb\n' ProductComparer class\nOption Explicit\n\nImplements Lapis.IEqualityComparer\n\n' Determines whether the specified objects are equal.\nPublic Function Equals(ByVal x As Variant, ByVal y As Variant) As Boolean\n\n    If x Is Nothing Or y Is Nothing Then\n        Equals = False\n        Exit Function\n    End If\n    \n    Equals = (x.Name = y.Name) And (x.Code = y.Code)\n    \nEnd Function\n\n\nPrivate Function IEqualityComparer_Equals(ByVal x As Variant, ByVal y As Variant) As Boolean\n    IEqualityComparer_Equals = Me.Equals(x, y)\nEnd Function\n```\n\n```vb\nOption Explicit\n' Main module\n\nPublic Sub Start()\n\n    Dim StoreA As Collection\n    Set StoreA = Lapis.CollectionExt.Make(MakeProduct(\"Apple\", 9), _\n                                          MakeProduct(\"Orange\", 4))\n    \n    Dim StoreB As Collection\n    Set StoreB = Lapis.CollectionExt.Make(MakeProduct(\"Apple\", 9), _\n                                          MakeProduct(\"Orange\", 4))\n    \n    Dim EqualAB As Boolean\n    EqualAB = Lapis.CollectionExt.SequenceEqual(StoreA, StoreB, New ProductComparer)\n    \n    Debug.Print \"Equal? \" & EqualAB\n\nEnd Sub\n\n' This code produces the following output:\n'\n' Equal? True\n\n\nPrivate Function MakeProduct(ByVal Name As String, ByVal Code As Long) As Product\n\n    Dim Output As New Product\n    Output.Name = Name\n    Output.Code = Code\n    Set MakeProduct = Output\n\nEnd Function\n\n```"
    },
    "StringExt": "Represents a collection of helper methods to work with a string type.",
    "StringExt.IndexOf (String, String, Long, VbCompareMethod)": {
        "short-description": "Returns the zero-based index of the first occurrence of the specified string in the current string",
        "description": "Returns the zero-based index of the first occurrence of the specified string in the current string",
        "parameters": {
            "Str": "A source string which will be examined.",
            "Value": "The string to seek.",
            "StartIndex": "The search starting position. If value is not provided, the default value will be 0. That means, search will start from the beginning of `Str`.",
            "ComparisonMethod": "One of the enumeration values that specifies the rules for the search."
        },
        "returns": [
            "Long",
            "The zero-based index position of the value parameter from the start of the current instance if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex."
        ],
        "errors": [
            [
                "OnArgumentError",
                "When `Str` is empty string."
            ],
            [
                "OnArgumentOutOfRangeException",
                "`StartIndex` or `count` is smaller than 0."
            ],
            [
                "OnArgumentOutOfRangeException",
                "`ComparisonMethod` is not `vbTextCompare` or `vbBinaryCompare`."
            ]
        ],
        "example": "The following example finds the first occurrence of either letter a in the string.\n\n```vb\nOption Explicit\nPublic Sub Start()\n    Debug.Print \"Case insensitive search: \" & StringExt.IndexOf(\"aaAAaa\", \"a\")\n    Debug.Print \"Case sensitive search: \" & StringExt.IndexOf(\"aaAAaa\", \"A\", , vbCompareMethod.vbBinaryCompare)\n    Debug.Print \"Case insensitive search: \" & StringExt.IndexOf(\"aaAAaa\", \"a\", 2, vbCompareMethod.vbTextCompare)\n    Debug.Print \"Case sensitive search: \" & StringExt.IndexOf(\"aaAAaa\", \"a\", 2, vbCompareMethod.vbBinaryCompare)\n\nEnd Sub\n\n' The example displays the following output:\n' Case insensitive search: 0\n' Case sensitive search: 2\n' Case insensitive search with specified StartIndex: 2\n' Case sensitive search with specified StartIndex: 4\n```",
        "remarks": "Index numbering starts from 0 (zero). The startIndex parameter can range from 0 to the length of the string instance."
    },
    "StringExt.Compare (String, String, Boolean)": {
        "short-description": "Compares two specified Strings, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.",
        "description": "Compares two specified Strings, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.",
        "parameters": {
            "Str1": "The first string to compare.",
            "Str2": "The second string to compare.",
            "IgnoreCase": "`true` to ignore case during the comparison; otherwise, `false`."
        },
        "returns": [
            "Long",
            "A long value that indicates the lexical relationship between the two comparands.\n\n|Value|Condition|\n|---|---|\n|Less than zero|`strA` precedes `strB` in the sort order|\n|Zero|`strA` occurs in the same position as `strB` in the sort order.|\n|Greater than zero|`strA` follows `strB` in the sort order.|"
        ],
        "example": "The following example demonstrates the Compare(String, String, Boolean) method in use.\n\n```vb\nOption Explicit\n' Main Module\n\nPublic Sub Start()\n\n    Dim StringUpper As String: StringUpper = \"ABC\"\n    Dim StringLower As String: StringLower = \"abc\"\n\n    Debug.Print \"Comparing \" & StringUpper & \" and \" & StringLower & \".\"\n\n    Debug.Print \"The Strings are equal when capitalized? \" & _\n                IIf(StringExt.Compare(UCase(StringUpper), UCase(StringLower), IgnoreCase:=False) = 0, \"true\", \"false\")\n                \n    Debug.Print \"The Strings are equal when case is ignored? \" & _\n                IIf(StringExt.Compare(StringUpper, StringLower, IgnoreCase:=True) = 0, \"true\", \"false\")\n                \nEnd Sub\n\n' The example displays the following output:\n' Comparing ABC and abc.\n' The Strings are equal when capitalized? true\n' The Strings are equal when case is ignored? true\n```",
        "remarks": ""
    },
    "StringExt.Concat (ParamArray Variant)": {
        "short-description": "Concatenates the members of a constructed Variant ParamArray of type String.",
        "description": "Concatenates the elements of a specified String array.",
        "parameters": {
            "Items": "An array of strings to join."
        },
        "returns": [
            "String",
            "The concatenated elements of `Items`."
        ],
        "example": "The following example takes three strings and joins them into one.\n\n```vb\nOption Explicit\nPublic Sub Start()\n    Debug.Print StringExt.Concat(\"'01\", \"-\", \"114'\")\nEnd Sub\n\n' The example displays the following output:\n' '01-114'\n```"
    },
    "StringExt.Contains (String, String)": {
        "short-description": "Returns a value indicating whether a specified substring occurs within this string.",
        "description": "Returns a value indicating whether a specified substring occurs within this string.",
        "parameters": {
            "Str": "A source string which will examined.",
            "Value": "The string to seek."
        },
        "returns": [
            "Boolean",
            "`true` if the `value` parameter occurs within this string, or if `Value` is the empty string (\"\"); otherwise, `false`."
        ],
        "example": "The following example finds the first occurrence of either letter a in the string.\n```vb\nOption Explicit\nPublic Sub Start()\n\n    Debug.Print \"Does A11-003b contains letter B? \" & StringExt.Contains(\"A11-003b\", \"B\")\n    Debug.Print \"Does A11-003b contains letter B?\" & StringExt.Contains(\"A11-003b\", \"a\")\n\nEnd Sub\n\n' The example displays the following output:\n' Does A11-003b contains letter B? True\n' Does A11-003b contains letter z? False\n```",
        "remarks": "This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position."
    },
    "StringExt.EndsWith (String, String, VbCompareMethod)": {
        "short-description": "Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.",
        "description": "Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.",
        "parameters": {
            "Str": "A source string which will examined.",
            "Value": "The string to compare.",
            "StringComparison": "One of the enumeration values that specifies the rules for the search."
        },
        "returns": [
            "Boolean",
            "`true` if value matches the end of this instance; otherwise, `false`."
        ],
        "example": "The following example indicates whether each string in an array ends with a period (\".\").\n\n```vb\nOption Explicit\nPublic Sub Start()\n\n    Dim Arr(2) As String\n    Arr(0) = \"This is a string.\"\n    Arr(1) = \"Hello!\"\n    Arr(2) = \"Nothing\"\n\n    Dim Item As Variant\n    For Each Item In Arr\n        Dim EndsWithPeriod As Boolean\n        EndsWithPeriod = StringExt.EndsWith(Item, \".\", VbCompareMethod.vbTextCompare)\n        Debug.Print Item & \" ends with a period \" & EndsWithPeriod\n    Next Item\n\nEnd Sub\n\n' The example displays the following output:\n' This is a string. ends with a period True\n' Hello! ends with a period False\n' Nothing ends with a period False\n```",
        "errors": [
            [
                "OnArgumentError",
                "When `Str` is empty string."
            ],
            [
                "OnArgumentError",
                "`ComparisonMethod` is not `vbTextCompare` or `vbBinaryCompare`."
            ]
        ],
        "remarks": "This method compares value to the substring at the end of this instance that is the same length as value, and returns an indication whether they are equal. To be equal, value must be a reference to this same instance or match the end of this instance.\n\nThis method performs a word (case-sensitive and culture-sensitive) comparison."
    },
    "StringExt.IndexOfAny (String, String)": {
        "short-description": "Reports the zero-based index of the first occurrence in this instance of any character in a specified array of characters.",
        "description": "Reports the zero-based index of the first occurrence in this instance of any character in a specified array of characters.",
        "parameters": {
            "Str": "A source string which will be examined.",
            "AnyOf()": "Array of strings containing one or more characters to seek."
        },
        "returns": [
            "Long",
            "The zero-based index position of the first occurrence in this instance where any character in `AnyOf` was found, -1 if no character in `AnyOf` was found."
        ],
        "errors": [
            [
                "OnArgumentError",
                "`AnyOf` is not initialized."
            ]
        ],
        "example": "The following example finds the first occurrence of either 1 or 2 in the string.\n\n```vb\nOption Explicit\nPublic Sub Start()\n    Debug.Print StringExt.IndexOfAny(\"Any 1 number is not 2.\", ArrayH.StringArray(\"1\", \"2\"))\nEnd Sub\n\n' The example displays the following output:\n' 4\n```",
        "remarks": "The search is case-insensitive. If value of `Str` parameter is empty, method returns -1."
    },
    "StringExt.Insert (String, Long, String)": {
        "short-description": "Returns a new string in which a specified string is inserted at a specified index position in this instance.",
        "description": "Returns a new string in which a specified string is inserted at a specified index position in this instance.",
        "parameters": {
            "Str": "The string to which value will be inserted.",
            "StartIndex": "The zero-based index position of the insertion.",
            "Value": "The string to insert"
        },
        "returns": [
            "String",
            "A new string that is equivalent to this instance, but with value inserted at position StartIndex."
        ],
        "errors": [
            [
                "OnArgumentError",
                "When `Str` is empty string."
            ],
            [
                "ArgumentOutOfRangeException",
                "`StartIndex` is negative or greater than the length of this instance."
            ]
        ],
        "example": "The following example inserts a space character in the fourth character position (the character at index 3) of a string.\n\n```vb\nOption Explicit\nPublic Sub Start()\n\n    Dim Original As String: Original = \"aaabbb\"\n    Debug.Print \"The original string \" & Original\n    \n    Dim Modified As String: Modified = StringExt.Insert(Original, 3, \" \")\n    Debug.Print \"The modified string: \" & Modified\n\nEnd Sub\n\n' The example displays the following output:\n' The original string: aaabbb\n' The modified string: aaa bbb\n```",
        "remarks": "If `StartIndex` is equal to the length of this instance, value is appended to the end of this instance."
    },
    "StringExt.LastIndexOf (String, String, Long, Long, VbCompareMethod)": {
        "short-description": "Returns the zero-based index of the last occurrence of the specified string in the current string.",
        "description": "Returns the zero-based index of the last occurrence of the specified string in the current string.",
        "parameters": {
            "Str": "A source string which will be examined.",
            "Value": "The string to seek.",
            "StartIndex": "The search starting position. The search proceeds from startIndex toward the beginning of this instance.",
            "Count": "The number of character positions to examine. If value is not provided, the default value will be `Len(Str) - StartIndex`.",
            "ComparisonMethod": "One of the enumeration values that specifies the rules for the search."
        },
        "returns": [
            "Long",
            "The zero-based index position of the value parameter from the start of the current instance if that string is found, or -1 if it is not. If value is `vbEmptyString`, the return value is `StartIndex`."
        ],
        "errors": [
            [
                "OnArgumentError",
                "When `Str` is empty string."
            ],
            [
                "OnArgumentError",
                "`Value` is empty string."
            ],
            [
                "ArgumentOutOfRangeException",
                "`StartIndex` or `Count` is smaller than 0."
            ],
            [
                "ArgumentOutOfRangeException",
                "`StartIndex` is greater than the length of `Str`"
            ],
            [
                "ArgumentOutOfRangeException",
                "`Len(Str) - Count` is smaller than `StartIndex`"
            ],
            [
                "ArgumentOutOfRangeException",
                "`ComparisonMethod` is not `vbTextCompare` or `vbBinaryCompare`."
            ]
        ],
        "example": "The following example demonstrates how last index of letter a can be found.\n\n```vb\nOption Explicit\nPublic Sub Start()\n\n    Debug.Print \"Case insensitive search: \" & StringExt.LastIndexOf(\"aaAAaa\", \"a\")\n    Debug.Print \"Case sensitive search: \" & StringExt.LastIndexOf(\"aaAAaa\", \"A\", , , VbCompareMethod.vbBinaryCompare)\n    Debug.Print \"Case insensitive search: \" & StringExt.LastIndexOf(\"aaAAaa\", \"a\", 5, , VbCompareMethod.vbTextCompare)\n    Debug.Print \"Case sensitive search: \" & StringExt.LastIndexOf(\"aaAAaa\", \"A\", 5, , VbCompareMethod.vbBinaryCompare)\n\nEnd Sub\n\n' The example displays the following output:\n' Case insensitive search: 0\n' Case sensitive search: 2\n' Case insensitive search with specified StartIndex: 2\n' Case sensitive search with specified StartIndex: 4\n```",
        "remarks": "Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at Length - 1."
    },
    "StringExt.LastIndexOfAny (String, String)": {
        "short-description": "Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a array.",
        "description": "Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a array.",
        "parameters": {
            "Str": "A source string which will be examined.",
            "AnyOf()": "Array of strings containing one or more characters to seek."
        },
        "returns": [
            "Long",
            "The zero-based index position of the last occurrence in this instance where any character in `AnyOf` was found, -1 if no character in `AnyOf` was found."
        ],
        "errors": [
            [
                "OnArgumentError",
                "When `Str` is empty string."
            ],
            [
                "OnArgumentError",
                "`AnyOf` is not initialized."
            ]
        ],
        "example": "The following example finds the first occurrence of either 1 or 2 in the string.\n\n```vb\nOption Explicit\nPublic Sub Start()\n    Debug.Print StringExt.LastIndexOfAny(\"Any 1 number is not 2. but it's every 1.\", ArrayH.StringArray(\"1\", \"2\"))\nEnd Sub\n\n' The example displays the following output:\n' 38\n```",
        "remarks": "The search is case-insensitive. If value of `Str` parameter is empty, method returns -1."
    },
    "StringExt.Remove (String, Long)": {
        "short-description": "Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.",
        "description": "Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.",
        "parameters": {
            "Str": "A source string which will be examined.",
            "StartIndex": "The zero-based position to begin deleting characters."
        },
        "returns": [
            "String",
            "A new string that is equivalent to this string except for the removed characters."
        ],
        "errors": [
            [
                "OnArgumentOutOfRange",
                "`StartIndex` is smaller than 0."
            ],
            [
                "OnArgumentOutOfRange",
                "`StartIndex` is greater than the length of `Str`"
            ]
        ],
        "example": "The following example demonstrates the Remove method. The next-to-last case removes all text starting from the specified index through the end of the string. The last case removes three characters starting from the specified index.\n\n```vb\nOption Explicit\nPublic Sub Start()\n\n    Dim Str as String: Str = \"abc---def\"\n    Debug.Print \"1) \" & Str\n    Debug.Print \"2) \" & StringExt.Remove(Str, 3)\n\nEnd Sub\n\n' The example displays the following output:\n' 1) abc---def\n' 2) abc\n```"
    },
    "StringExt.RemoveRange (String, Long, Long)": {
        "short-description": "Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.",
        "description": "Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.",
        "parameters": {
            "Str": "A source string which will be examined.",
            "StartIndex": "The zero-based position to begin deleting characters.",
            "Count": "The number of characters to delete."
        },
        "returns": [
            "String",
            "A new string that is equivalent to this string except for the removed characters."
        ],
        "errors": [
            [
                "OnArgumentOutOfRange",
                "`StartIndex` or `Count` is smaller than 0."
            ],
            [
                "OnArgumentOutOfRange",
                "`StartIndex` plus `Count` is greater than the length of `Str`"
            ]
        ],
        "example": "The following example demonstrates the RemoveRange method. The next-to-last case RemoveRanges all text starting from the specified index through the end of the string. The last case RemoveRanges three characters starting from the specified index.\n\n```vb\nOption Explicit\nPublic Sub Start()\n\n    Dim Str As String: Str = \"abc---def\"\n    Debug.Print \"1) \" & Str\n    Debug.Print \"2) \" & StringExt.RemoveRange(Str, 3, 3)\n\nEnd Sub\n\n' The example displays the following output:\n' 1) abc---def\n' 2) abcdef\n```"
    },
    "StringExt.StartsWith (String, String, VbCompareMethod)": {
        "short-description": "Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.",
        "description": "Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.",
        "parameters": {
            "Str": "A source string which will be examined.",
            "Value": "The string to compare.",
            "StringComparison": "One of the enumeration values that specifies the rules for the search."
        },
        "returns": [
            "Boolean",
            "`true` if this instance begins with `value`; otherwise, `false`."
        ],
        "errors": [
            [
                "OnArgumentError",
                "When `Str` is empty string."
            ],
            [
                "OnArgumentOutOfRange",
                "`ComparisonMethod` is not `vbTextCompare` or `vbBinaryCompare`."
            ]
        ],
        "example": "The following example finds the first occurrence of either letter a in the string.\n\n```vb\nOption Explicit\nPublic Sub Start()\n\n    Debug.Print \"Case insensitive search: \" & StringExt.StartsWith(\"The House of the Seven Gables\", \"the\", VbCompareMethod.vbBinaryCompare)\n    Debug.Print \"Case sensitive search: \" & StringExt.StartsWith(\"The House of the Seven Gables\", \"the\", VbCompareMethod.vbTextCompare)\n\nEnd Sub\n\n' Case insensitive search: False\n' Case sensitive search: True\n```",
        "remarks": "The StartsWith method compares the value parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal."
    },
    "StringExt.TrimStart (String, ParamArray Variant)": {
        "short-description": "Removes all the leading occurrences of a set of characters specified in an array from the current string.",
        "description": "Removes all the leading occurrences of a set of characters specified in an array from the current string.",
        "parameters": {
            "Str": "A source string which will be trimmed.",
            "TrimChars": "An array of Unicode characters to remove, or `vbNullString`."
        },
        "returns": [
            "String",
            "The string that remains after all occurrences of characters in the `TrimChars` parameter are removed from the start of the current string. If `TrimChars` is `vbNullString` or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged."
        ],
        "example": "The following example demonstrates the basic functionality of the `TrimStart` method:\n\n```vb \nOption Explicit\n\nPublic Sub Start()\n\n    Dim LineWithLeadingSpaces As String: LineWithLeadingSpaces = \"    Noice\"\n    Dim LineWithLeadingSymbols As String: LineWithLeadingSymbols = \"$$$$Noice\"\n    Dim LineWithLeadingUnderscores As String: LineWithLeadingUnderscores = \"____Noice\"\n    Dim LineWithLeadingLetter As String: LineWithLeadingLetter = \"xxxxNoice\"\n    \n    ' Add lines to array to work with them all of the examples\n    Dim Lines As Collection\n    Set Lines = CollectionExt.Make(LineWithLeadingSpaces, _\n                                    LineWithLeadingSymbols, _\n                                    LineWithLeadingUnderscores, _\n                                    LineWithLeadingLetter)\n                                    \n    Debug.Print \"These are initial values we are going to work with.\"\n    Dim Line As Variant\n    For Each Line In Lines\n        Debug.Print Line\n    Next Line\n    \n    ' A basic demonstration of TrimStart in action\n    Dim LineAfterTrimStart As String\n    LineAfterTrimStart = StringExt.TrimStart(LineWithLeadingSpaces, \" \")\n    Debug.Print vbNewLine & \"Line, after removing spaces: \" _\n                          & LineAfterTrimStart\n    \n    ' Since TrimStart accepts a character array of leading items to be removed as an argument,\n    ' it's possible to do things like trim multiple pieces of data that each have different\n    ' leading characters,\n    For Each Line In Lines\n        Debug.Print \"Line \" & Line & \" was trimmed to \" _\n                     & StringExt.TrimStart(Line, \" \", \"$\", \"_\", \"x\")\n    Next Line\n    \n    ' Or handle pieces of data that have multiple kinds of leading characters\n    Dim LineToBeTrimmed As String: LineToBeTrimmed = \"__###__ John Smith\"\n    Debug.Print \"Line \" & LineToBeTrimmed & \" was trimmed to \" _\n                & StringExt.TrimStart(LineToBeTrimmed, \"_\", \"#\", \" \")\n    \nEnd Sub\n\n' This code produces the following output:\n' These are initial values we are going to work with.\n'     Noice\n' $$$$Noice\n' ____Noice\n' xxxxNoice\n'\n' Line, after removing spaces: Noice\n' Line     Noice was trimmed to Noice\n' Line $$$$Noice was trimmed to Noice\n' Line ____Noice was trimmed to Noice\n' Line xxxxNoice was trimmed to Noice\n' Line __###__ John Smith was trimmed to John Smith\n```"
    },
    "StringExt.TrimEnd (String, ParamArray Variant)": {
        "short-description": "Removes all the trailing occurrences of a set of characters specified in an array from the current string.",
        "description": "Removes all the trailing occurrences of a set of characters specified in an array from the current string.",
        "parameters": {
            "Str": "A source string which will be trimmed.",
            "TrimChars": "An array of Unicode characters to remove, or `vbNullString`."
        },
        "returns": [
            "String",
            "The string that remains after all occurrences of characters in the `TrimChars` parameter are removed from the end of the current string. If `TrimChars` is `vbNullString` or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged."
        ],
        "example": "The following example demonstrates how you can use the TrimEnd(String, ParamArray) method to trim white space or punctuation marks from the end of a string.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Sentence As String\n    Sentence = \"The dog had a bone, a ball, and other toys.\"\n    \n    Dim Words As Variant: Words = VBA.Split(Sentence)\n    Dim Word As Variant\n    For Each Word In Words\n        Debug.Print StringExt.TrimEnd(Word, \",\", \".\", \" \")\n    Next Word\n\nEnd Sub\n\n' The example displays the following output:\n'\n' The\n' dog\n' had\n' a\n' bone\n' a\n' ball\n' and\n' other\n' toys\n```"
    },
    "StringExt.Trim (String, ParamArray Variant)": {
        "short-description": "Removes all leading and trailing occurrences of a set of characters specified in an array from the current string.",
        "description": "Removes all leading and trailing occurrences of a set of characters specified in an array from the current string.",
        "parameters": {
            "Str": "A source string which will be trimmed.",
            "TrimChars": "An array of Unicode characters to remove, or `vbNullString`."
        },
        "returns": [
            "String",
            "The string that remains after all occurrences of the characters in the `trimChars` parameter are removed from the start and end of the current string. If `trimChars` is an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged."
        ],
        "example": "The following example uses the Trim(String, ParamArray) method to remove space, asterisk (*), and apostrophe (') characters from a string.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Banner As String: Banner = \"*** Banner - Buffalo Bull EFB ***\"\n    Dim Result As String: Result = StringExt.Trim(Banner, \"*\", \" \", \"'\")\n    \n    Debug.Print \"Trimmer \" & Banner & \" to '\" & Result & \"'\"\n\nEnd Sub\n\n' The example displays the following output:\n'\n' Trimmer *** Banner - Buffalo Bull EFB *** to 'Banner - Buffalo Bull EFB'\n```"
    },
    "StringExt.ToUpper (String)": {
        "short-description": "The uppercase equivalent of the current string.",
        "description": "The uppercase equivalent of the current string.",
        "parameters": {
            "Str": "A source string which will be turned into upper cased version."
        },
        "returns": [
            "String",
            "The uppercase equivalent of the current string."
        ],
        "example": "The following example calls the ToUpper method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets. It then displays each string whose uppercase character is different from its lowercase character.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim ToUpperLetters As String: ToUpperLetters = \"abcDefg\"\n    Debug.Print StringExt.ToUpper(ToUpperLetters)\n\nEnd Sub\n\n' The example displays the following output:\n'\n' ABCDEFG\n```"
    },
    "StringExt.ToLower (String)": {
        "short-description": "Returns a copy of this string converted to lowercase.",
        "description": "Returns a copy of this string converted to lowercase.",
        "parameters": {
            "Str": "A source string which will be turned into lower cased version."
        },
        "returns": [
            "String",
            "A string in lowercase."
        ],
        "example": "The following example converts string to lowercase.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim BigLetters As String: BigLetters = \"ABCDEFG\"\n    Debug.Print StringExt.ToLower(BigLetters)\n    \nEnd Sub\n\n' The example displays the following output:\n'\n' abcdefg\n```"
    },
    "StringExt.PadRight (String, Long, String)": {
        "short-description": "Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.",
        "description": "Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.",
        "parameters": {
            "Str": "A source string which will be turned into lower cased version.",
            "TotalWidth" : "The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.",
            "PaddingChar" : "A Unicode padding character."
        },
        "returns": [
            "String",
            "A new string that is equivalent to this instance, but left-aligned and padded on the right with as many `paddingChar` characters as needed to create a length of `totalWidth`. However, if `totalWidth` is less than the length of this instance, the method returns a reference to the existing instance. If `totalWidth` is equal to the length of this instance, the method returns a new string that is identical to this instance."
        ],
        "errors": [
            [
                "OnArgumentOutOfRange",
                "`TotalWidth` is less than zero"
            ]
        ],
        "example": "The following example demonstrates the PadRight method.\n\n```vb\nOption Explicit\n\nPublic Sub Start()\n\n    Dim Str As String: Str = \"forty-two\"\n    Dim Pad As String: Pad = \".\"\n    \n    Debug.Print StringExt.PadRight(Str, 15, Pad)\n    Debug.Print StringExt.PadRight(Str, 2, Pad)\n\nEnd Sub\n\n' The example displays the following output:\n'\n' forty-two......\n' forty-two\n\n```"
    },
    "ArrayExt": "Represents a collection of helper methods to work with an array type.",
    "ArrayExt.Exists (Variant, Variant)": {
        "short-description": "Checks if given element exists in the array.",
        "description": "Checks if given element exists in the array.",
        "parameters": {
            "Item": "",
            "Arr": ""
        },
        "returns": [
            "Boolean",
            ""
        ]
    },
    "ArrayExt.IsInitialized (Variant)": {
        "short-description": "Indicates if array is initialized.",
        "description": "",
        "parameters": {
            "Arr()": ""
        },
        "returns": [
            "Boolean",
            ""
        ]
    },
    "ArrayExt.ToCollection (Variant)": {
        "short-description": "Converts array into a collection.",
        "description": "",
        "parameters": {
            "Arr()": ""
        },
        "returns": [
            "Collection",
            ""
        ]
    },
    "ArrayExt.Copy (Variant, Long, Variant, Long, Long)": {
        "short-description": "Copies elements from an Array starting at SourceIndex and pastes them to another Array starting at DestinationIndex. Number of elements which will be copied is specified in Length parameter.",
        "description": "Copies elements from an Array starting at SourceIndex and pastes them to another Array starting at DestinationIndex. Number of elements which will be copied is specified in Length parameter.",
        "parameters": {
            "Arr()": "",
            "SourceIndex": "",
            "DestinationArray()": "",
            "DestinationIndex": "",
            "Length": ""
        }
    },
    "ArrayExt.Rank (Variant)": {
        "short-description": "Returns the number of dimensions of an array.",
        "description": "",
        "parameters": {
            "Arr()": ""
        },
        "returns": [
            "Long",
            ""
        ]
    },
    "ArrayExt.Length (Variant)": {
        "short-description": "Returns the number of elements in single dimension of array.",
        "description": "",
        "parameters": {
            "Arr()": ""
        },
        "returns": [
            "Long",
            ""
        ]
    },
    "ArrayExt.NumElements (Variant, Long)": {
        "short-description": "Returns the number of elements in the specified dimension (Dimension) of the array in Arr. If you omit Dimension, the first dimension is used.",
        "description": "",
        "parameters": {
            "Arr()": "",
            "Dimension": ""
        },
        "returns": [
            "Long",
            ""
        ]
    },
    "ArrayExt.Clear (Variant, Long, Long)": {
        "short-description": "Clears an range of items in Array starting at Index.",
        "description": "",
        "parameters": {
            "Arr()": "",
            "Index": "",
            "Length": ""
        }
    },
    "ArrayExt.ToString (Variant)": {
        "short-description": "Returns a String which contains every element in an Array recursively.",
        "description": "",
        "parameters": {
            "Arr()": ""
        },
        "returns": [
            "String",
            ""
        ]
    },
    "ArrayExt.BinarySearch (Variant, Long, Long, Variant, IComparer)": {
        "short-description": "Searches a section of an array for a given element using a binary search algorithm.",
        "description": "",
        "parameters": {
            "Arr()": "",
            "Index": "",
            "Length": "",
            "Value": "",
            "Comparer": ""
        },
        "returns": [
            "Long",
            ""
        ]
    },
    "ArrayExt.GetLowerBound (Variant, Long)": {
        "short-description": "Returns the index of the first element of the specified dimension in the array.",
        "description": "",
        "parameters": {
            "Arr()": "",
            "Dimension": ""
        },
        "returns": [
            "Long",
            ""
        ]
    },
    "ArrayExt.IndexOf (Variant, Variant, Long, Long)": {
        "short-description": "Returns the index of the first occurrence of a given value in a range of an array.",
        "description": "",
        "parameters": {
            "Arr()": "",
            "Value": "",
            "StartIndex": "",
            "Count": ""
        },
        "returns": [
            "Long",
            ""
        ]
    },
    "ArrayExt.SetValue (Variant, Variant, Long)": {
        "short-description": "Sets a value in the given array using element and index of within range of array.",
        "description": "",
        "parameters": {
            "Arr()": "",
            "Value": "",
            "Index": ""
        }
    },
    "ArrayExt.ToVariantArray (Variant) As Variant()": {
        "short-description": "Converts an array into variant array.",
        "description": "",
        "parameters": {
            "Arr": "",
            "Value": "",
            "Index": ""
        },
        "returns": [
            "Variant()",
            ""
        ]
    },
    "ArrayExt.StringArray (ParamArray Variant)": {
        "short-description": "Returns a array of strings based on the given input",
        "description": "Returns a array of strings based on the given input",
        "parameters": {
            "Items": "Items which will be included in array."
        },
        "returns": [
            "String()",
            "Newly created array where each element is a string."
        ],
        "example": "Example to be added."
    },
    "ArrayExt.Sort (Variant, Lapis.IComparer)": {
        "short-description": "Sort the array using MergeSort",
        "description": "Sort the array using MergeSort",
        "parameters": {
            "Items()": "",
            "Comparer": ""
        },
        "example": "Example to be added."
    },
    "DateExt": "Represents a collection of helper methods to work with a date data type.",
    "DirectoryExt": "Represents a set of helper methods to work with directories.",
    "WorksheetExt": "Collection of methods used to speed up work with worksheets.",
    "Errors": "Predeclared (static) class which a custom errors to better express indent of a code."
}